# scripts/prediction/ml_prediction.py

import pandas as pd
import numpy as np
import joblib
from xgboost import XGBClassifier
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
import os
import time

def load_data():
    df = pd.read_csv('data/Synthetic_Financial_datasets_log.csv')
    return df

def preprocess_data(df):
    # Sort by 'step' to maintain temporal order
    df = df.sort_values('step')

    # Feature Engineering
    df['isMerchant'] = df['nameDest'].apply(lambda x: 1 if x.startswith('M') else 0)

    # Encode 'type' using LabelEncoder
    le = LabelEncoder()
    df['type'] = le.fit_transform(df['type'])
    joblib.dump(le, 'models/label_encoder.joblib')

    # Drop unnecessary columns
    df = df.drop(['nameOrig', 'nameDest', 'isFlaggedFraud'], axis=1)

    return df

def create_time_features(df):
    # Create lag features
    df['amount_lag1'] = df['amount'].shift(1)
    df['amount_lag2'] = df['amount'].shift(2)

    # Create rolling mean features
    df['amount_roll_mean_3'] = df['amount'].rolling(window=3).mean()
    df['amount_roll_mean_5'] = df['amount'].rolling(window=5).mean()

    # Fill NaN values generated by shifting and rolling
    df.fillna(0, inplace=True)

    return df

def split_data(df):
    # Separate features and target
    X = df.drop('isFraud', axis=1)
    y = df['isFraud']

    # Split the data
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42, stratify=y
    )

    return X_train, X_test, y_train, y_test

def preprocess_pipeline():
    # Define numerical and categorical columns
    numerical_cols = ['amount', 'oldbalanceOrg', 'newbalanceOrig',
                      'oldbalanceDest', 'newbalanceDest',
                      'amount_lag1', 'amount_lag2',
                      'amount_roll_mean_3', 'amount_roll_mean_5']
    categorical_cols = ['type', 'isMerchant']

    # Preprocessing pipelines
    numerical_pipeline = Pipeline([
        ('scaler', StandardScaler())
    ])

    categorical_pipeline = Pipeline([
        ('onehot', 'passthrough')  # For tree-based models, encoding is not strictly necessary
    ])

    preprocessor = ColumnTransformer([
        ('num', numerical_pipeline, numerical_cols),
        ('cat', categorical_pipeline, categorical_cols)
    ])

    return preprocessor

def train_xgboost(X_train, y_train):
    # Handle class imbalance
    scale_pos_weight = (len(y_train) - sum(y_train)) / sum(y_train)

    # Define the model
    model = XGBClassifier(
        n_estimators=100,
        max_depth=5,
        learning_rate=0.1,
        objective='binary:logistic',
        scale_pos_weight=scale_pos_weight,
        use_label_encoder=False,
        eval_metric='logloss'
    )

    # Create a pipeline
    preprocessor = preprocess_pipeline()
    pipeline = Pipeline([
        ('preprocessor', preprocessor),
        ('classifier', model)
    ])

    # Fit the pipeline
    pipeline.fit(X_train, y_train)

    # Save the pipeline
    joblib.dump(pipeline, 'models/saved_models/xgboost_prediction_model.joblib')

    return pipeline

def evaluate_model(pipeline, X_test, y_test):
    y_pred = pipeline.predict(X_test)
    print("Classification Report:")
    print(classification_report(y_test, y_pred, zero_division=0))
    print("Confusion Matrix:")
    print(confusion_matrix(y_test, y_pred))

def main():
    start_time = time.time()
    df = load_data()
    df = preprocess_data(df)
    df = create_time_features(df)
    X_train, X_test, y_train, y_test = split_data(df)

    # Create directory for saved models if it doesn't exist
    os.makedirs('models/saved_models', exist_ok=True)

    # Train and evaluate the model
    print("Training XGBoost with time-based features...")
    pipeline = train_xgboost(X_train, y_train)
    print("Evaluating the model...")
    evaluate_model(pipeline, X_test, y_test)

    end_time = time.time()
    elapsed_time = end_time - start_time
    print(f"Total ML Prediction time: {elapsed_time:.2f} seconds")

if __name__ == '__main__':
    main()
